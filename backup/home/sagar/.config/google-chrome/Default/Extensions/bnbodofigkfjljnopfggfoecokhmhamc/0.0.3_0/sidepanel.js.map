{"version":3,"file":"sidepanel.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://reject-cookies/webpack/bootstrap","webpack://reject-cookies/webpack/runtime/make namespace object","webpack://reject-cookies/./src/sidepanel.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// API endpoints\nconst API_BASE_URL = 'https://reject-cookies-api.bymitch.com/api';\nconst BUG_REPORT_ENDPOINT = `${API_BASE_URL}/reports/bug`;\nconst COOKIE_REPORT_ENDPOINT = `${API_BASE_URL}/reports/cookies`;\n// Constants\nconst REQUEST_TIMEOUT = 10000; // 10 seconds\n// Get the elements\nconst reportCookiesButton = document.getElementById('reportCookies');\nconst reportBugButton = document.getElementById('reportBug');\nconst bugDescriptionTextarea = document.getElementById('bugDescription');\nif (!reportCookiesButton || !reportBugButton || !bugDescriptionTextarea) {\n    throw new Error('Required elements not found in the DOM');\n}\n// Function to show message to user\nfunction showMessage(message, isError = false) {\n    // Remove any existing message\n    const existingMessage = document.querySelector('.message');\n    if (existingMessage) {\n        existingMessage.remove();\n    }\n    // Create new message element\n    const messageElement = document.createElement('div');\n    messageElement.className = `message ${isError ? 'error' : 'success'}`;\n    messageElement.textContent = message;\n    // Add message to the page\n    document.body.appendChild(messageElement);\n    // Remove message after 5 seconds\n    setTimeout(() => {\n        messageElement.remove();\n    }, 5000);\n}\n// Function to get current tab URL\nasync function getCurrentTabUrl() {\n    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n    return tab?.url || 'Unknown URL';\n}\n// Function to make API request with timeout\nasync function makeApiRequest(endpoint, data) {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);\n    try {\n        const response = await fetch(endpoint, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n            signal: controller.signal,\n        });\n        clearTimeout(timeoutId);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    }\n    catch (error) {\n        clearTimeout(timeoutId);\n        console.error('API request failed:', error);\n        if (error instanceof Error) {\n            if (error.name === 'AbortError') {\n                return {\n                    success: false,\n                    error: 'Request timed out. Please try again.',\n                };\n            }\n            return {\n                success: false,\n                error: error.message,\n            };\n        }\n        return {\n            success: false,\n            error: 'Unknown error occurred',\n        };\n    }\n}\n// Add click handlers\nreportCookiesButton.addEventListener('click', async () => {\n    try {\n        const currentUrl = await getCurrentTabUrl();\n        const reportData = { website: currentUrl };\n        // Disable button while request is in progress\n        reportCookiesButton.setAttribute('disabled', 'true');\n        reportCookiesButton.textContent = 'Reporting...';\n        const response = await makeApiRequest(COOKIE_REPORT_ENDPOINT, reportData);\n        if (response.success) {\n            showMessage('Successfully reported unblocked cookies. Thank you for your feedback!');\n        }\n        else {\n            showMessage(response.error || 'Failed to report unblocked cookies. Please try again.', true);\n        }\n    }\n    catch (error) {\n        showMessage('An error occurred. Please try again.', true);\n    }\n    finally {\n        // Re-enable button\n        reportCookiesButton.removeAttribute('disabled');\n        reportCookiesButton.textContent = 'Cookies not rejected on current page';\n    }\n});\nreportBugButton.addEventListener('click', async () => {\n    const description = bugDescriptionTextarea.value.trim();\n    const currentUrl = await getCurrentTabUrl();\n    if (!description) {\n        showMessage('Please enter a description of the bug', true);\n        return;\n    }\n    try {\n        const reportData = {\n            website: currentUrl,\n            description: description,\n        };\n        // Disable button while request is in progress\n        reportBugButton.setAttribute('disabled', 'true');\n        reportBugButton.textContent = 'Submitting...';\n        const response = await makeApiRequest(BUG_REPORT_ENDPOINT, reportData);\n        if (response.success) {\n            showMessage('Thank you for reporting the bug! We will look into it.');\n            // Clear the textarea after successful submission\n            bugDescriptionTextarea.value = '';\n        }\n        else {\n            showMessage(response.error || 'Failed to submit bug report. Please try again.', true);\n        }\n    }\n    catch (error) {\n        showMessage('An error occurred. Please try again.', true);\n    }\n    finally {\n        // Re-enable button\n        reportBugButton.removeAttribute('disabled');\n        reportBugButton.textContent = 'Submit Bug Report';\n    }\n});\nexport {};\n"],"names":[],"sourceRoot":""}